[/
 / Copyright (c) 2007 Darren Garvey
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[def __xss_footnote__ It is generally accepted that a CGI program should pay attention to where meta-data has come from (eg. [@http://www.google.com/search?q=XSS XSS]). In other words, since `meta_var` removes such distinctions, its use should be limited to places where the source of the variable doesn't matter. For example, a language toggle (like `"hl=en"`, as Google uses) could come from anywhere and doing so is not an issue.]


[section:variables Using Request Variables]

[warning
A request [*must] be [link __loading__ loaded] before the request data can be accessed.
]

In all, there are twelve member functions of [classref cgi::basic_request `basic_request<>`] that provide access to the variables associated to that request. Five of those return a `cgi::map&` (all except `var_()`, which is simply a concatenation of all the other data) which you may use like a `std::map<std::string,std::string>` to search through the complete list of variables.

[table Request variable accessor functions
  [[Function signature] [Purpose]]
  [
   [`cgi::map& env()`]
   [Return a complete map of the meta-variables associated with the request.]
  ]
  [
   [`std::string env(const std::string&)`]
   [Takes the name of the environment variable wanted and returns the value associated with it.]
  ]
  [
   [`cgi::map& GET()`]
   [Return a complete map of the GET variables associated with the request.]
  ]
  [
   [`std::string GET(const std::string&)`]
   [Takes the name of the __GET__ variable and returns the value associated with it (if any).]
  ]
  [
   [`cgi::map& POST()`]
   [Return a complete map of the POST variables associated with the request.]
  ]
  [
   [`std::string POST(const std::string&, bool greedy = true)`]
   [Takes the name of a __POST__ variable and returns the value associated with it (if any).

    If `greedy == true` - which it is by default - then more data is read from the request if required until all of the POST data has been read.]
  ]
  [
   [`cgi::map& form()`]
   [Return a complete map of the from variables associated with the request. These will either be the GET or POST variables, depending on whether the `request_method()` is `"GET"` or `"POST"` respectively.]
  ]
  [
   [`std::string form(const std::string&, bool greedy = true)`]
   [Takes the name of either a __GET__ or __POST__ variable and returns the value associated with it (if any). Note that this will only search the type referred to by the environment variable `"REQUEST_METHOD"`, so it is generally safe to use.

   If `greedy == true` - which it is by default - then more data is read from the request as required until all of the POST data has been read.]
  ]
  [
   [`cgi::map& cookie()`]
   [Return a complete map of the cookie variables associated with a request.]
  ]
  [
   [`std::string cookie(const std::string& name)`]
   [Takes the name of the cookie variable and returns the value associated with it (if any).]
  ]
  [
   [`std::string var(const std::string& name, bool greedy = true)`]
   [Takes the name of [*any] meta-variable and returns the value associated with it (if any).[footnote __xss_footnote__]

   If `greedy == true` - which it is by default - then more data is read from the request if required until either the requested variable is found or all of the POST data has been read, which ever comes first.]
  ]
]

[h3 Example usage]

``
{
// ...
  cgi::request req;

  cgi::map& get_vars = req.GET();
  std::string user_id( get_vars["user_id"] );

  if (!user_id.empty()) {
    // user supplied a "user_id" in a GET request
    // This method doesn't distinguish between an empty (set) variable
    // and an unset variable.
  }

  cgi::map::const_iterator iter = get_vars.find("user_id");
  if (iter = get_vars.end()) {
    // "user_id" is unset
  }else{
    // "user_id" is empty
    ``[@http://www.boost.org/libs/utility/assert.html BOOST_ASSERT]`` (iter->second == "");
  }
// ...
}
``

Since looking up variables using raw strings can be error-prone, the `basic_request<>` class provides a safer way to reference the standard CGI environment variables. The table below lists them, and briefly explains their function.[footnote Reference information largely drafted from [@http://hoohoo.ncsa.uiuc.edu/cgi/env.html] and [@http://www.ietf.org/rfc/rfc3875 RFC3875].]


[table Standard CGI Meta-variables
  [[Function signature] [Purpose]]
  [
   [`auth_type()`]
   [If the server supports user authentication, and the script is protected, this is the protocol-specific authentication method used to validate the user.]
  ]
  [
   [`content_length()`]
   [The size of the message-body attached to the request.]
  ]
  [
   [`content_type()`]
   [The content type of data attached to the query, if any (ev. POST, PUT)]
  ]
  [
   [`gateway_interface()`]
   [The revision of the CGI specification to which this server complies. Format: CGI/revision, eg. `"CGI/1.1"`]
  ]
  [
   [`path_info()`]
   [The extra path information, as given by the client. In other words, scripts can be accessed by their virtual pathname, followed by extra information at the end of this path. The extra information is sent as PATH_INFO.]
  ]
  [
   [`path_translated()`]
   [The server provides a translated version of PATH_INFO, which takes the path and does any virtual-to-physical mapping to it.]
  ]
  [
   [`query_string()`]
   [The information following the '?' in the URL. This is where the GET data is extracted from. Format: `"name1=value1&name2=value2..."` Any reserved characters are URL-encoded.]
  ]
  [
   [`remote_addr()`]
   [The IP address of the remote host making the request. You should [*never] rely on the accuracy of this value, as it is easily forged.]
  ]
  [
   [`remote_host()`]
   [The hostname making the request.]
  ]
  [
   [`remote_ident()`]
   [If the HTTP server supports [rfc 931] identification, then this variable will be set to the remote user name retrieved from the server. Usage of this variable should be limited to logging only.]
  ]
  [
   [`remote_user()`]
   [If the server supports user authentication, and the script is protected, this is the username they have authenticated as.]
  ]
  [
   [`request_method()`]
   [The method with which the request was made. For HTTP, this is "GET", "HEAD", "POST", etc.]
  ]
  [
   [`script_name()`]
   [A virtual path to the script being executed, used for self-referencing URLs.]
  ]
  [
   [`server_name()`]
   [The server's hostname, DNS alias, or IP address as it would appear in self-referencing URLs.]
  ]
  [
   [`server_port()`]
   [The port number to which the request was sent.]
  ]
  [
   [`server_protocol()`]
   [The name and revision of the information protcol this request came in with. Format: protocol/revision.]
  ]
  [
   [`server_software()`]
   [The name and version of the information server software answering the request (and running the gateway). Format: name/version.]
  ]
]


[/ should this return a `std::pair<std::string, cgi::var_type>` instead, where a `cgi::var_type` is one of `get`, `post`, `env`, or `cookie`?]

[endsect]
